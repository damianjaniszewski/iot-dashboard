{"version":3,"sources":["../server/data.js"],"names":["addSession","getSession","addNotifier","getEvents","getSensor","_sessions","_notifiers","event","events","config","silent","_connectionString","process","env","connectionStringHostName","connectionStringSharedAccessKeyName","connectionStringSharedAccessKey","_printError","err","console","log","message","_gotEvent","unshift","body","forEach","notifier","sensorId","sensorType","sensorLat","sensorLng","sensorState","_client","fromConnectionString","open","then","getPartitionIds","bind","partitionIds","map","partitionId","createReceiver","Date","now","receiver","on","catch","token","data","type","cb","push","filters","Promise","resolve","filter","Object","keys","some","id","sensor","t"],"mappings":"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","file":"data.js","sourcesContent":["import { Client } from 'azure-event-hubs';\nimport dotenv from 'dotenv';\n\nconst _sessions = {};\nconst _notifiers = {\n  event: []\n};\n\nexport const events = [];\n\ndotenv.config({silent: true});\n\nconst _connectionString = process.env.connectionStringHostName + ';' + process.env.connectionStringSharedAccessKeyName+ ';' +process.env.connectionStringSharedAccessKey;\n\nvar _printError = function (err) {\n  console.log(err.message);\n};\n\nvar _gotEvent = function (event) {\n  events.unshift(event.body);\n  _notifiers.event.forEach(notifier => notifier(event));\n  console.log('event> '+event.body.sensorId+'.'+event.body.sensorType+' ('+event.body.sensorLat+', '+event.body.sensorLng+'): '+event.body.sensorState);\n // console.log(JSON.stringify(message.body));\n // console.log('');\n};\n\nconst _client = Client.fromConnectionString(_connectionString);\n\n_client.open()\n    .then(_client.getPartitionIds.bind(_client))\n    .then(function (partitionIds) {\n        return partitionIds.map(function (partitionId) {\n            return _client.createReceiver('$Default', partitionId, { 'startAfterTime' : Date.now()-2*24*60*60*1000}).then(function(receiver) {\n                console.log('Created partition receiver: ' + partitionId)\n                receiver.on('errorReceived', _printError);\n                receiver.on('message', _gotEvent);\n            });\n        });\n    })\n    .catch(_printError);\n\nexport function addSession(token, data) {\n  _sessions[token] = data;\n}\n\nexport function getSession(token) {\n  return _sessions[token];\n}\n\nexport function addNotifier(type, cb) {\n  _notifiers[type].push(cb);\n  console.log(_notifiers['event']);\n}\n\nexport function getEvents(filters) {\n  if (filters) {\n    return Promise.resolve({\n      events: events.filter(event =>\n        Object.keys(filters).some(filter => event[filter] === filters[filter])\n      )\n    });\n  }\n  return Promise.resolve({ events });\n}\n\nexport function getSensor(id) {\n  let sensor;\n  events.some((t) => {\n    if (t.sensorId === id) {\n      sensor = t;\n      return true;\n    }\n    return false;\n  });\n  return Promise.resolve({ sensor });\n}\n\nexport default { addNotifier, addSession, getSession, getSensor, getEvents };\n"]}