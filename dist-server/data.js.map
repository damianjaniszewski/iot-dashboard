{"version":3,"sources":["../server/data.js"],"names":["addSession","getSession","addNotifier","getEvents","getSensors","getSensor","_sessions","_notifiers","event","sensor","events","sensors","config","silent","_connectionString","process","env","connectionStringHostName","connectionStringSharedAccessKeyName","connectionStringSharedAccessKey","_printError","err","console","log","message","_addSensor","index","findIndex","t","sensorId","push","_gotEvent","body","sensorType","sensorLat","sensorLng","sensorState","unshift","forEach","notifier","_client","fromConnectionString","open","then","getPartitionIds","bind","partitionIds","map","partitionId","createReceiver","Date","now","receiver","on","catch","token","data","type","cb","filters","Promise","resolve","filter","Object","keys","some","id"],"mappings":"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","file":"data.js","sourcesContent":["import { Client } from 'azure-event-hubs';\nimport dotenv from 'dotenv';\n\nconst _sessions = {};\nconst _notifiers = {\n  event: [],\n  sensor: []\n};\n\nexport const events = [];\nexport const sensors = [];\n\ndotenv.config({silent: true});\n\nconst _connectionString = process.env.connectionStringHostName + ';' + process.env.connectionStringSharedAccessKeyName+ ';' +process.env.connectionStringSharedAccessKey;\n\nvar _printError = function (err) {\n  console.log(err.message);\n};\n\nfunction _addSensor(sensor) {\n  var index = sensors.findIndex((t) => {\n    if (t.sensorId === sensor.sensorId) {\n      return true;\n    }\n    return false;\n  });\n\n  (index >= 0) ? sensors[index] = sensor : sensors.push(sensor);\n};\n\nvar _gotEvent = function (event) {\n  console.log('event> '+event.body.sensorId+'.'+event.body.sensorType+' ('+event.body.sensorLat+', '+event.body.sensorLng+'): '+event.body.sensorState);\n // console.log(JSON.stringify(message.body));\n // console.log('');\n\n  events.unshift(event.body);\n  _notifiers.event.forEach(notifier => notifier(event));\n\n  _addSensor(event.body);\n  _notifiers.sensor.forEach(notifier => notifier(event));\n};\n\nconst _client = Client.fromConnectionString(_connectionString);\n\n_client.open()\n    .then(_client.getPartitionIds.bind(_client))\n    .then(function (partitionIds) {\n        return partitionIds.map(function (partitionId) {\n            return _client.createReceiver('$Default', partitionId, { 'startAfterTime' : Date.now()-2*24*60*60*1000}).then(function(receiver) {\n                console.log('Created partition receiver: ' + partitionId)\n                receiver.on('errorReceived', _printError);\n                receiver.on('message', _gotEvent);\n            });\n        });\n    })\n    .catch(_printError);\n\nexport function addSession(token, data) {\n  _sessions[token] = data;\n}\n\nexport function getSession(token) {\n  return _sessions[token];\n}\n\nexport function addNotifier(type, cb) {\n  _notifiers[type].push(cb);\n}\n\nexport function getEvents(filters) {\n  if (filters) {\n    return Promise.resolve({\n      events: events.filter(event =>\n        Object.keys(filters).some(filter => event[filter] === filters[filter])\n      )\n    });\n  }\n  return Promise.resolve({ events });\n}\n\nexport function getSensors() {\n  return Promise.resolve({ sensors });\n}\n\nexport function getSensor(id) {\n  let sensor;\n  sensors.some((t) => {\n    if (t.sensorId === id) {\n      sensor = t;\n      return true;\n    }\n    return false;\n  });\n  return Promise.resolve({ sensor });\n}\n\nexport default { addNotifier, addSession, getSession, getSensors, getSensor, getEvents };\n"]}