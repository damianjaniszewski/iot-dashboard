const _sessions = {};
const _notifiers = {
  event: []
};

export const events = [
  {
    id: 'task-1',
    name: 'Initializing instance',
    percentComplete: 0,
    status: 'Waiting'
  },
  {
    id: 'task-2',
    name: 'Adding components',
    percentComplete: 0,
    status: 'Waiting'
  },
  {
    id: 'task-3',
    name: 'Testing infrastructure',
    percentComplete: 0,
    status: 'Waiting'
  },
  {
    id: 'task-4',
    name: 'Removing instance',
    percentComplete: 0,
    status: 'Waiting'
  }
];

const increments = [5, 10, 20, 25];

setInterval(
  () => {
    const event = events[
      Math.floor(Math.random() * events.length)
    ];

    if (!event.percentComplete) {
      event.status = 'Running';
    }

    _notifiers.event.forEach(notifier => notifier(event));
  },
  2000
);

setInterval(
  () => {
    events.forEach((event) => {
      if (event.status === 'Running') {
        if (event.percentComplete < 100) {
          event.percentComplete = Math.min(100, event.percentComplete +
            increments[
              Math.floor(Math.random() * increments.length)
            ]
          );
        } else {
          event.percentComplete = 0;
          event.status = 'Waiting';
        }
        _notifiers.event.forEach(notifier => notifier(event));
      }
    });
  },
  1000
);

export function addSession(token, data) {
  _sessions[token] = data;
}

export function getSession(token) {
  return _sessions[token];
}

export function addNotifier(type, cb) {
  _notifiers[type].push(cb);
}

export function getEvents(filters) {
  // if (filters) {
  //   return Promise.resolve({
  //     events: events.filter(event =>
  //       Object.keys(filters).some(filter => event[filter] === filters[filter])
  //     )
  //   });
  // }
  return Promise.resolve({ events });
}

export function getEvent(id) {
  let event;
  events.some((t) => {
    if (t.id === id) {
      event = t;
      return true;
    }
    return false;
  });
  return Promise.resolve({ event });
}

export default { addNotifier, addSession, getSession, getEvent, getEvents };
